% This file contains specific data recognizers and rules that link the
% automatically-generated assist databin information to the
% user-specified abstract/documentation information.

:- multifile data_instance/4, data_get/4.

turnstile_ns(Elem, URI) :-
    atom_concat('http://arcos.turnstile/GE/', Elem, URI).

% The DevelopmentPlan specifies that SOFTWARE#CODE_DEVELOPMENT
% references the plan-defined SoftwareStandard.  This is an
% abstract/documentation linkage that is established by this rule.

data_get('SOFTWARE#CODE_DEVELOPMENT', 'SOFTWARE#referenced', sw_devel(_,_,_),
         Value) :-
    turnstile_ns('DevelopmentPlanData#SoftwareStandard', Value).


% The DevelopmentPlan creates a SoftwareIntegration as an instance of
% the SOFTWARE#COMPILE class.  The normal data_get return creates a
% RACK relation, not an RDF relation, so the rdf relation here is
% explicit using predicates not normally needed for data recognizers.
% If the DevelopmentPlan simply specified a SOFTWARE#COMPILE, then
% this data_get recognizer could be removed.

data_instance('DevelopmentPlan#SoftwareIntegration', load_data, Instance,
              [ uid(Instance, Title, Descr),
                activity_data(BW,BS,BF) ]) :-
    BW = build_with(Nonce, compile, _ToolName, _ToolPath, _ToolArgs),
    BS = build_start(Nonce, _StartTime),
    BF = build_finished(Nonce, _FinishTime, _ExitVal),
    BW, BS, BF,
    activity_instance(Nonce, compile, Instance),
    Title = "compilation",
    Descr = "Execution of the compiler".


% Explicit links between software files and documented requirements.
% These cannot be automatically discovered and are project specific.

data_get('FILE#FILE', 'FILE#satisfies', sw_file_data(_,_,'output.h'), Value) :-
    turnstile_ns('CounterApplicationDesignDescription#OUT-LLR-1', Value).
data_get('FILE#FILE', 'FILE#satisfies', sw_file_data(_,_,'output.h'), Value) :-
    turnstile_ns('CounterApplicationDesignDescription#OUT-LLR-2', Value).

data_get(_, 'SOFTWARE#definedIn', func_decl(_, FileName), FileRef) :-
    build_inputs(Nonce, InpSources),
    build_from(Nonce, Dir),
    member(FileName, InpSources),
    file_instance(Nonce, Dir, FileName, FileRef).

data_get('FILE#FILE', 'FILE#satisfies', sw_file_data(_,_,'hw.h'), Value) :-
    turnstile_ns('CounterApplicationDesignDescription#IN-LLR-1', Value).
data_get('FILE#FILE', 'FILE#satisfies', sw_file_data(_,_,'hw.h'), Value) :-
    turnstile_ns('CounterApplicationDesignDescription#IN-LLR-2', Value).
data_get('FILE#FILE', 'FILE#satisfies', sw_file_data(_,_,'hw.h'), Value) :-
    turnstile_ns('CounterApplicationDesignDescription#IN-LLR-3', Value).
data_get('FILE#FILE', 'FILE#satisfies', sw_file_data(_,_,'hw.h'), Value) :-
    turnstile_ns('CounterApplicationDesignDescription#IN-LLR-4', Value).
data_get('FILE#FILE', 'FILE#satisfies', sw_file_data(_,_,'hw.h'), Value) :-
    turnstile_ns('CounterApplicationDesignDescription#IN-LLR-5', Value).
data_get('FILE#FILE', 'FILE#satisfies', sw_file_data(_,_,'hw.h'), Value) :-
    turnstile_ns('CounterApplicationDesignDescription#IN-LLR-6', Value).

data_get('FILE#FILE', 'FILE#satisfies', sw_file_data(_,_,'counter.h'), V) :-
    turnstile_ns('CounterApplicationDesignDescription#EXE-LLR-1', V).
data_get('FILE#FILE', 'FILE#satisfies', sw_file_data(_,_,'counter.h'), V) :-
    turnstile_ns('CounterApplicationDesignDescription#EXE-LLR-2', V).
data_get('FILE#FILE', 'FILE#satisfies', sw_file_data(_,_,'counter.h'), V) :-
    turnstile_ns('CounterApplicationDesignDescription#EXE-LLR-3', V).

% Generate explicit links between the automatically-recognized input
% files and the corresponding software functions and data declared in
% those files.

data_instance('SOFTWARE#SWCOMPONENT', load_data, 'output_function',
              [uid('output_function',
                   "output",
                   "C Function: 'output'"),
               func_decl('output_function', 'output.c')]).

data_instance('SOFTWARE#SWCOMPONENT', load_data, 'input_function',
              [uid('input_function',
                   "input function",
                   "C Function: 'input'"),
               func_decl('input_function', 'input.c')]).

data_instance('SOFTWARE#SWCOMPONENT', load_data, 'main_function',
              [uid('main_function',
                   "main function",
                   "C Function: 'main'"),
               func_decl('main_function', 'counter.c')]).

data_get('SOFTWARE#SWCOMPONENT', 'SOFTWARE#componentType', func_decl(_, _), 'SourceFunction').

% conf.json is not part of a build, so the format is indeterminate

data_get('FILE#FILE', 'FILE#fileFormat', sw_file_data(_,_,'conf.json'),
         'JSONFile').
data_instance('FILE#FORMAT', load_data, 'JSONFile',
              [ uid('JSONFile', 'JSONFile', 'JSONFileFormat'),
                fmt('JSONFile')]).
