#!/usr/bin/env python3

from SPARQLWrapper import SPARQLWrapper, JSON
from graphviz import Graph
from urllib.parse import urlparse, urlunparse
import argparse
import math
from graphviz.dot import Digraph

from rdflib.term import Identifier

DEFAULT_TRIPLESTORE = 'http://localhost:3030/RACK'
OWL_URL='http://www.w3.org/2002/07/owl#'
PREFIXES = f"""
  PREFIX owl:<{OWL_URL}>
  PREFIX PROV-S:<http://arcos.rack/PROV-S#>
"""
CLASS = urlparse(f"{OWL_URL}Class")
DATATYPE_PROPERTY = urlparse(f"{OWL_URL}DatatypeProperty")
OBJECT_PROPERTY = urlparse(f"{OWL_URL}ObjectProperty")

ACTIVITY_COLOR='lightgreen'
TYPE_COLOR='orange'
PROPERTY_COLOR='lightblue'

def type_link_href(a1, a2):
  return f"type link {min(a1, a2).fragment} {max(a1, a2).fragment}.dot.svg"

def type_link_filename(a1, a2):
  return f"type link {min(a1, a2).fragment} {max(a1, a2).fragment}.dot"

def cross_href(a1, a2):
  return f"cross {min(a1, a2).fragment} {max(a1, a2).fragment}.dot.svg"

def cross_filename(a1, a2):
  return f"cross {min(a1, a2).fragment} {max(a1, a2).fragment}.dot"

def activity_href(activity):
  return f"activity {activity.fragment}.dot.svg"

def activity_filename(activity):
  return f"activity {activity.fragment}.dot"

def activities_filename():
  return "activities.dot"

def edgewidth(n):
  return str(math.log(n+1,50))

def parse_args():
  parser = argparse.ArgumentParser(description='Data shape visualization tool')
  parser.add_argument('--graph', action='append', required=True, dest='graphs', type=str)
  parser.add_argument('--triple-store', default=DEFAULT_TRIPLESTORE, dest='triple_store', type=str)
  parser.add_argument('--output', dest='output', type=str)
  return parser.parse_args()

class Session:
  def __init__(self, triple_store, graphs):
    self.sparql = SPARQLWrapper(triple_store, returnFormat=JSON)
    self.graphs = "FROM <http://rack001/model>"
    for graph in graphs:
      self.graphs += f" FROM <{graph}>"

  def has_type(self, x, t):
    return t in self.types.get(x, set())

  def get_id(self, x):
    return self.identifiers[x]

  def load_types(self):
    results = self.query(f"""
      {PREFIXES}
      SELECT ?s ?t
      {self.graphs}
      WHERE {{
        ?s a ?t
      }}
      """)
    print('Types: ', len(results))

    self.types = {}
    for result in results:
      s = urlparse(result["s"]["value"])
      t = urlparse(result["t"]["value"])
      self.types.setdefault(s,set()).add(t)

  def load_identifiers(self):
    results = self.query(f"""
      {PREFIXES}
      SELECT DISTINCT ?s ?i
      {self.graphs}
      WHERE {{
        ?s PROV-S:identifier ?i
      }}
      """)

    identifiers = {}
    self.identifiers = identifiers
    for result in results:
      s = urlparse(result["s"]["value"])
      i = result["i"]["value"]
      identifiers[s] = i

  def query(self, query_string):
    self.sparql.setQuery(query_string)
    return self.sparql.queryAndConvert()["results"]["bindings"]

def get_activities(session):
  results = session.query(f"""
    {PREFIXES}
    SELECT DISTINCT ?a ?i
    {session.graphs}
    WHERE {{
      ?_ PROV-S:dataInsertedBy ?a.
      ?a PROV-S:identifier ?i.
    }}
    """)
  print('Classes: ', len(results))

  return { urlparse(result["a"]["value"]): result["i"]["value"] for result in results}

def count_types(session):
  results = session.query(f"""
    {PREFIXES}
    SELECT ?S ?a (COUNT(*) as ?n)
    {session.graphs}
    WHERE {{
      ?s a ?S .
      ?s PROV-S:dataInsertedBy ?a.
    }}
    GROUP BY ?S ?a
    """)
  print('Data properties: ', len(results))

  properties = {}

  for result in results:
      t = urlparse(result["S"]["value"])
      a = urlparse(result["a"]["value"])
      n = result["n"]["value"]
      if not session.has_type(t, CLASS):
        continue
      properties.setdefault(a, {})[t] = n
  return properties

def count_local_properties(session, activity):
  results = session.query(f"""
    {PREFIXES}
    SELECT ?S ?p (COUNT(*) as ?n)
    {session.graphs}
    WHERE {{
      ?s ?p ?o.
      ?s a ?S.
      ?s PROV-S:dataInsertedBy <{urlunparse(activity)}>.
    }}
    GROUP BY ?S ?p
    """)
  print('Data properties: ', len(results))

  properties = {}
  for result in results:
      t = urlparse(result["S"]["value"])
      p = urlparse(result["p"]["value"])
      n = result["n"]["value"]
      if not session.has_type(t, CLASS) or not session.has_type(p, DATATYPE_PROPERTY):
        continue
      properties.setdefault(t, {})[p] = n

  return properties

def count_relations(session):
  """Count the relations between data ingestion activities"""
  results = session.query(f"""
    {PREFIXES}
    SELECT ?sa ?oa (COUNT(*) as ?n)
    {session.graphs}
    WHERE {{
      ?s ?p ?o.
      ?s PROV-S:dataInsertedBy ?sa.
      ?o PROV-S:dataInsertedBy ?oa.
      FILTER (?sa != ?oa).
      FILTER (?p != PROV-S:dataInsertedBy).
      }}
    GROUP BY ?sa ?oa
    """)
  print('Object properties:', len(results))

  relations = {}

  for result in results:
      sa = urlparse(result["sa"]["value"])
      oa = urlparse(result["oa"]["value"])
      n = int(result["n"]["value"])
      
      relations[sa, oa] = n
  return relations

def count_local_types(session, activity):
  results = session.query(f"""
    {PREFIXES}
    SELECT ?S (COUNT(*) as ?n)
    {session.graphs}
    WHERE {{
      ?s a ?S.
      ?s PROV-S:dataInsertedBy <{urlunparse(activity)}>.
      }}
    GROUP BY ?S
    """)
  print('Object properties:', len(results))

  types = {}

  for result in results:
      st = urlparse(result["S"]["value"])
      if session.has_type(st, CLASS):
        types[st] = int(result["n"]["value"])

  return types

def count_cross_relations_precompute(session):
  results = session.query(f"""
    {PREFIXES}
    SELECT ?S ?sa ?p ?O ?oa (COUNT(*) as ?n)
    {session.graphs}
    WHERE {{
      ?s ?p ?o.
      ?s a ?S.
      ?o a ?O.
      ?s PROV-S:dataInsertedBy ?sa.
      ?o PROV-S:dataInsertedBy ?oa.
      FILTER (?p != PROV-S:dataInsertedBy).
      FILTER (?s != ?o || ?sa != ?oa)
      }}
    GROUP BY ?S ?sa ?p ?O ?oa
    """)
  print('Object properties:', len(results))

  relations = {}

  for result in results:
      st = urlparse(result["S"]["value"])
      sa = urlparse(result["sa"]["value"])
      p  = urlparse(result["p"]["value"])
      ot = urlparse(result["O"]["value"])
      oa = urlparse(result["oa"]["value"])
      if session.has_type(st, CLASS) and session.has_type(ot, CLASS):
        relations[st, sa, p, ot, oa] = int(result["n"]["value"])

  return relations

def count_type_activities(session):
  results = session.query(f"""
    {PREFIXES}
    SELECT ?S ?sa (COUNT(*) as ?n)
    {session.graphs}
    WHERE {{
      ?s a ?S.
      ?s PROV-S:dataInsertedBy ?sa.
      }}
    GROUP BY ?S ?sa ?p ?O ?oa
    """)

  activities = {}

  for result in results:
      st = urlparse(result["S"]["value"])
      sa = urlparse(result["sa"]["value"])
      if session.has_type(st, CLASS):
        activities.setdefault(st, {})[sa] = int(result["n"]["value"])

  return activities

def count_type_links(session):
  results = session.query(f"""
    {PREFIXES}
    SELECT ?S ?p ?O (COUNT(*) as ?n)
    {session.graphs}
    WHERE {{
      ?s a ?S.
      ?o a ?O.
      ?s ?p ?o.
      FILTER(?p != PROV-S:dataInsertedBy).
      }}
    GROUP BY ?S ?p ?O
    """)

  edges = {}
  for result in results:
      st = urlparse(result["S"]["value"])
      p = urlparse(result["p"]["value"])
      ot = urlparse(result["O"]["value"])
      edges.setdefault((st,ot), {})[p] = int(result["n"]["value"])
  return edges

def count_type_relations(session):
  results = session.query(f"""
    {PREFIXES}
    SELECT ?S ?O (COUNT(*) as ?n)
    {session.graphs}
    WHERE {{
      ?s a ?S.
      ?o a ?O.
      ?s ?p ?o.
      FILTER(?p != PROV-S:dataInsertedBy).
      }}
    GROUP BY ?S ?O
    """)

  relations = {}

  for result in results:
      st = urlparse(result["S"]["value"])
      ot = urlparse(result["O"]["value"])
      if session.has_type(st, CLASS) and session.has_type(ot, CLASS):
        relations[st,ot] = int(result["n"]["value"])

  return relations


def count_cross_relations(rels, activity1, activity2):
  return { (st, p, ot): n for (st, sa, p, ot, oa), n in rels.items() if sa == activity1 and oa == activity2 }

def make_top_dot(session, activities, relations):
  properties = count_types(session)

  dot = Graph(format='svg')
  nodeIds = {}

  for node, identifier in activities.items():

    txt = f"<<table cellborder=\"1\" border=\"0\" cellspacing=\"0\">\
            <tr><td colspan=\"2\" bgcolor=\"{ACTIVITY_COLOR}\"><b>{identifier}</b></td></tr>"

    tprops = properties.setdefault(node, {})
    for klass, count in tprops.items():
        txt += f"<tr><td bgcolor=\"{TYPE_COLOR}\" align=\"left\">{klass.fragment}</td>\
                <td bgcolor=\"{TYPE_COLOR}\">{count}</td></tr>"
    txt += "</table>>"

    nodeId = f"n{len(nodeIds)}"
    nodeIds[node] = nodeId

    dot.node(nodeId, txt,
      shape='plaintext',
      href=activity_href(node))

  for (s, o), n in relations.items():
    if s > o and (o,s) in relations:
      continue

    n += relations.get((o,s), 0)
    dot.edge(nodeIds[s], nodeIds[o], label=f"{n}",
      decorate="true",
      href=cross_href(s,o),
      penwidth=edgewidth(n))

  return dot

def make_activity_dot(session, activity, rels):
  types = count_local_types(session, activity)
  relations = count_cross_relations(rels, activity, activity)
  props = count_local_properties(session, activity)

  nodeIds = {}

  dot = Digraph(format='svg')
  dot.attr(compound="true")

  with dot.subgraph(name="cluster") as g:
    g.attr(label=session.get_id(activity))
    for t, n in types.items():
      nodeId = f"n{len(nodeIds)}"
      nodeIds[t] = nodeId

      txt = f"<<table cellborder=\"1\" border=\"0\" cellspacing=\"0\">\
        <tr><td bgcolor=\"{TYPE_COLOR}\"><b>{t.fragment}</b></td><td bgcolor=\"{TYPE_COLOR}\">{n}</td></tr>"

      for prop_name, prop_count in props.get(t, {}).items():
        txt += f"<tr><td bgcolor=\"{PROPERTY_COLOR}\">{prop_name.fragment}</td><td bgcolor=\"{PROPERTY_COLOR}\">{prop_count}</td></tr>"
      
      txt += "</table>>"
      g.node(nodeId, txt, shape='plaintext')
    
    for (st, p, ot), n in relations.items():
      dot.edge(nodeIds[st], nodeIds[ot],
        label=f"{p.fragment} {n}",
        decorate='true',
        penwidth=edgewidth(n))

  peers = {}
  for (_, a1, _, _, a2), n in rels.items():
    if a1 == activity and a2 != activity:
      peers[a2] = peers.get(a2,0) + n
    elif a1 != activity and a2 == activity:
      peers[a1] = peers.get(a1,0) + n

  for a,n in peers.items():
    nodeId = f"n{len(nodeIds)}"
    nodeIds[a] = nodeId
    txt = f"<<table cellborder=\"1\" border=\"0\" cellspacing=\"0\">\
      <tr><td bgcolor=\"{ACTIVITY_COLOR}\"><b>{session.get_id(a)}</b></td></tr></table>>"
    dot.node(nodeId, txt, shape='plaintext', href=activity_href(a))

    dot.edge("n0", nodeId,
      label=f"{n}",
      decorate='true',
      href=cross_href(activity, a),
      ltail="cluster",
      penwidth=edgewidth(n))

  dot.render(filename=activity_filename(activity), format='svg')  

def cross_dot_subgraph(session, dot, name, activity, types, props):
  nodeIds = {}
  with dot.subgraph(name=f"cluster_{name}") as g:
    g.attr(href=activity_href(activity))
    g.attr(label=session.get_id(activity))
    for t, n in types.items():
      nodeId = f"{name}{len(nodeIds)}"
      nodeIds[t] = nodeId

      txt = f"<<table cellborder=\"1\" border=\"0\" cellspacing=\"0\">\
        <tr><td bgcolor=\"{TYPE_COLOR}\"><b>{t.fragment}</b></td><td bgcolor=\"{TYPE_COLOR}\">{n}</td></tr>"

      for prop_name, prop_count in props.get(t, {}).items():
        txt += f"<tr><td bgcolor=\"{PROPERTY_COLOR}\">{prop_name.fragment}</td><td bgcolor=\"{PROPERTY_COLOR}\">{prop_count}</td></tr>"
      
      txt += "</table>>"
      g.node(nodeId, txt, shape='plaintext')
  return nodeIds

def make_cross_dot(session, activity1, activity2, rels):
  dot = Digraph(format='svg')
  dot.attr(rankdir="LR")
  dot.attr(ranksep="3")

  types1 = count_local_types(session, activity1)
  types2 = count_local_types(session, activity2)
  rel = count_cross_relations(rels, activity1, activity2)
  rel2 = count_cross_relations(rels, activity2, activity1)
  prop1 = count_local_properties(session, activity1)
  prop2 = count_local_properties(session, activity2)

  nodeIds1 = cross_dot_subgraph(session, dot, "n", activity1, types1, prop1)
  nodeIds2 = cross_dot_subgraph(session, dot, "m", activity2, types2, prop2)

  for (s,p,o), n in rel.items():
    dot.edge(nodeIds1[s], nodeIds2[o],
      label=f"{p.fragment} {n}",
      decorate='true',
      penwidth=edgewidth(n))

  for (s,p,o), n in rel2.items():
    dot.edge(nodeIds2[s], nodeIds1[o],
      label=f"{p.fragment} {n}",
      decorate='true',
      penwidth=edgewidth(n))

  dot.render(filename=cross_filename(activity1, activity2), format='svg')

def make_activities_dot(session):
  activities = count_type_activities(session)
  type_links = count_type_links(session)

  dot = Graph()
  nodeIds = {}
  for type, activities in activities.items():
    nodeId = f"n{len(nodeIds)}"
    nodeIds[type] = nodeId
    
    txt = f"<<table cellborder=\"1\" border=\"0\" cellspacing=\"0\">\
        <tr><td colspan=\"2\" bgcolor=\"{TYPE_COLOR}\"><b>{type.fragment}</b></td></tr>"

    for activity, n in activities.items():
      txt += f"<tr><td bgcolor=\"{ACTIVITY_COLOR}\" href=\"{activity_href(activity)}\">{session.get_id(activity)}</td>"
      txt += f"<td bgcolor=\"{ACTIVITY_COLOR}\">{n}</td></tr>"

    txt += "</table>>"
    
    dot.node(nodeId,
      label=txt,
      shape='plaintext'
      )

  edges = {}
  for (st,ot),n in count_type_relations(session).items():
    key = min(st,ot),max(st,ot)
    edges[key] = edges.get(key, 0) + n

  for (n1,n2),count in edges.items():
    if n1 in nodeIds and n2 in nodeIds:

      edge_dot = Digraph()
      edge_dot.node("n1", label=n1.fragment)
      edge_dot.node("n2", label=n2.fragment)
      for p,n in type_links.get((n1,n2), {}).items():
        edge_dot.edge("n1", "n2",
          label=f"{p.fragment} {n}",
          decorate='true',
          penwidth=edgewidth(n))
      for p,n in type_links.get((n2,n1), {}).items():
        edge_dot.edge("n2", "n1",
          label=f"{p.fragment} {n}",
          decorate='true',
          penwidth=edgewidth(n))
      edge_dot.render(filename=type_link_filename(n1,n2), format='svg')

      dot.edge(nodeIds[n1], nodeIds[n2],
        penwidth=edgewidth(count),
        decorate='true',
        href=type_link_href(n1,n2),
        label=f"{count}")

  dot.render(filename=activities_filename(), format='svg')


def main():
  args = parse_args()
  session = Session(args.triple_store, args.graphs)
  session.load_types()
  session.load_identifiers()
  activities = get_activities(session)
  relations = count_relations(session)
  rels = count_cross_relations_precompute(session)
  print('Generating top graph')
  dot = make_top_dot(session, activities, relations)

  print('Generating activity summary')
  make_activities_dot(session)

  print('Generating activity graphs')
  for activity in activities:
    make_activity_dot(session, activity, rels)

  print('Generating cross-activity graphs')
  for s, o in relations:
    if s > o and (o,s) in relations:
      continue
    make_cross_dot(session, s, o, rels)

  if args.output is None:
    dot.view()
  else:
    dot.render(args.output, format='svg')

if __name__ == "__main__":
  main()
