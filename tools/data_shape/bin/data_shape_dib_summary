#!/usr/bin/env python3

from SPARQLWrapper import SPARQLWrapper, JSON
from graphviz import Graph
from urllib.parse import urlparse
import argparse

from rdflib.term import Identifier

DEFAULT_TRIPLESTORE = 'http://localhost:3030/RACK'
OWL_URL='http://www.w3.org/2002/07/owl#'
PREFIXES = f"""
  PREFIX owl:<{OWL_URL}>
  PREFIX PROV-S:<http://arcos.rack/PROV-S#>
"""
CLASS = urlparse(f"{OWL_URL}Class")
DATATYPE_PROPERTY = urlparse(f"{OWL_URL}DatatypeProperty")
OBJECT_PROPERTY = urlparse(f"{OWL_URL}ObjectProperty")

def parse_args():
  parser = argparse.ArgumentParser(description='Data shape visualization tool')
  parser.add_argument('--graph', action='append', required=True, dest='graphs', type=str)
  parser.add_argument('--triple-store', default=DEFAULT_TRIPLESTORE, dest='triple_store', type=str)
  parser.add_argument('--output', dest='output', type=str)
  return parser.parse_args()

class Session:
  def __init__(self, triple_store, graphs):
    self.sparql = SPARQLWrapper(triple_store, returnFormat=JSON)
    self.graphs = "FROM <http://rack001/model>"
    for graph in graphs:
      self.graphs += f" FROM <{graph}>"

  def has_type(self, x, t):
    return t in self.types.get(x, set())

  def load_types(self):
    results = self.query(f"""
      {PREFIXES}
      SELECT ?s ?t
      {self.graphs}
      WHERE {{
        ?s a ?t
      }}
      """)
    print('Types: ', len(results))

    self.types = {}
    for result in results:
      s = urlparse(result["s"]["value"])
      t = urlparse(result["t"]["value"])
      self.types.setdefault(s,set()).add(t)

  def query(self, query_string):
    self.sparql.setQuery(query_string)
    return self.sparql.queryAndConvert()["results"]["bindings"]

def optional_url(d, k):
  if k in d:
    return urlparse(d[k]["value"])
  else:
    return None

def get_nodes(session):
  results = session.query(f"""
    {PREFIXES}
    SELECT DISTINCT ?a ?i
    {session.graphs}
    WHERE {{
      ?_ PROV-S:dataInsertedBy ?a.
      ?a PROV-S:identifier ?i.
    }}
    """)
  print('Classes: ', len(results))

  return { urlparse(result["a"]["value"]): result["i"]["value"] for result in results}


def count_properties(session):
  results = session.query(f"""
    {PREFIXES}
    SELECT ?S ?a (COUNT(*) as ?n)
    {session.graphs}
    WHERE {{
      ?s a ?S .
      ?s PROV-S:dataInsertedBy ?a.
    }}
    GROUP BY ?S ?a
    """)
  print('Data properties: ', len(results))

  properties = {}

  for result in results:
      t = urlparse(result["S"]["value"])
      a = urlparse(result["a"]["value"])
      n = result["n"]["value"]
      if not session.has_type(t, CLASS):
        continue
      properties.setdefault(a, {})[t] = n
  return properties


def count_relations(session):
  results = session.query(f"""
    {PREFIXES}
    SELECT ?sa ?oa (COUNT(*) as ?n)
    {session.graphs}
    WHERE {{
      ?s ?p ?o.
      ?s PROV-S:dataInsertedBy ?sa.
      ?o PROV-S:dataInsertedBy ?oa.
      FILTER (?sa != ?oa).
      }}
    GROUP BY ?sa ?oa
    """)
  print('Object properties:', len(results))

  relations = {}

  for result in results:
      sa = urlparse(result["sa"]["value"])
      oa = urlparse(result["oa"]["value"])
      n = int(result["n"]["value"])
      
      relations[sa, oa] = n
  return relations

def make_dot(session):
  nodes = get_nodes(session)
  properties = count_properties(session)
  relations = count_relations(session)

  dot = Graph()
  nodeIds = {}

  for node, identifier in nodes.items():

    txt = f"<<table cellborder=\"1\" border=\"0\" cellspacing=\"0\">\
            <tr><td colspan=\"2\" bgcolor=\"orange\"><b>{identifier}</b></td></tr>"

    tprops = properties.setdefault(node, {})
    for klass, count in tprops.items():
        txt += f"<tr><td bgcolor=\"lightblue\" align=\"left\">{klass.fragment}</td>\
                <td bgcolor=\"lightblue\">{count}</td></tr>"
    txt += "</table>>"

    nodeId = f"n{len(nodeIds)}"
    nodeIds[node] = nodeId

    dot.node(nodeId, txt, shape='plaintext')

  for (s, o), n in relations.items():
    if o > s and (s,o) in relations:
      continue

    n += relations.get((o,s), 0)
    dot.edge(nodeIds[s], nodeIds[o], label=f"{n}", decorate="true")

  return dot

def main():
  args = parse_args()
  session = Session(args.triple_store, args.graphs)
  session.load_types()
  dot = make_dot(session)

  if args.output is None:
    dot.view()
  else:
    dot.save(args.output)

if __name__ == "__main__":
  main()
